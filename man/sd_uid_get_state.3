'\" t
.\"     Title: sd_uid_get_state
.\"    Author: Lennart Poettering <lennart@poettering.net>
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 02/15/2012
.\"    Manual: sd_uid_get_state
.\"    Source: systemd
.\"  Language: English
.\"
.TH "SD_UID_GET_STATE" "3" "02/15/2012" "systemd" "sd_uid_get_state"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_uid_get_state, sd_uid_is_on_seat, sd_uid_get_sessions, sd_uid_get_seats \- Determine login state of a specific Unix user ID
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-login\&.h>
.fi
.ft
.HP \w'int\ sd_uid_get_state('u
.BI "int sd_uid_get_state(uid_t\ " "pid" ", char**\ " "state" ");"
.HP \w'int\ sd_uid_is_on_seat('u
.BI "int sd_uid_is_on_seat(uid_t\ " "pid" ", int\ " "require_active" ", const\ char*\ " "seat" ");"
.HP \w'int\ sd_uid_get_sessions('u
.BI "int sd_uid_get_sessions(uid_t\ " "pid" ", int\ " "require_active" ", char***\ " "sessions" ");"
.HP \w'int\ sd_uid_get_seats('u
.BI "int sd_uid_get_seats(uid_t\ " "pid" ", int\ " "require_active" ", char***\ " "seats" ");"
.SH "DESCRIPTION"
.PP
\fBsd_uid_get_state()\fR
may be used to determine the login state of a specific Unix user identifier\&. The following states are currently known:
offline
(user not logged in at all),
lingering
(user not logged in, but some user services running),
online
(user logged in, but not active),
active
(user logged in on an active seat)\&. In the future additional states might be defined, client code should be written to be robust in regards to additional state strings being returned\&. The returned string needs to be freed with the libc
\fBfree\fR(3)
call after use\&.
.PP
\fBsd_uid_is_on_seat()\fR
may be used to determine whether a specific user is logged in or active on a specific seat\&. Accepts a Unix user identifier and a seat identifier string as parameters\&. The
\fIrequire_active\fR
parameter is a boolean\&. If non\-zero (true) this function will test if the user is active (i\&.e\&. has a session that is in the foreground and accepting user input) on the specified seat, otherwise (false) only if the user is logged in (and possibly inactive) on the specified seat\&.
.PP
\fBsd_uid_get_sessions()\fR
may be used to determine the current sessions of the specified user\&. Acceptes a Unix user identifier as parameter\&. The
\fIrequire_active\fR
boolean parameter controls whether the returned list shall consist of only those sessions where the user is currently active (true) or where the user is currently logged in at all, possibly inactive (false)\&. The call returns a NULL terminated string array of session identifiers in
\fIsessions\fR
which needs to be freed by the caller with the libc
\fBfree\fR(3)
call after use, including all the strings referenced\&. If the string array parameter is passed as NULL the array will not be filled in, but the return code still indicates the number of current sessions\&. Note that instead of an empty array NULL may be returned and should be considered equivalent to an empty array\&.
.PP
Similar,
\fBsd_uid_get_seats()\fR
may be used to determine the list of seats on which the user currently has sessions\&. Similar semantics apply, however note that the user may have multiple sessions on the same seat as well as sessions with no attached seat and hence the number of entries in the returned array may differ from the one returned by
\fBsd_uid_get_sessions()\fR\&.
.SH "RETURN VALUE"
.PP
On success
\fBsd_uid_get_state()\fR
returns 0 or a positive integer\&. If the test succeeds
\fBsd_uid_is_on_seat()\fR
returns a positive integer, if it fails 0\&.
\fBsd_uid_get_sessions()\fR
and
\fBsd_uid_get_seats()\fR
return the number of entries in the returned arrays\&. On failure, these calls return a negative errno\-style error code\&.
.SH "NOTES"
.PP
The
\fBsd_uid_get_state()\fR,
\fBsd_uid_is_on_seat()\fR,
\fBsd_uid_get_sessions()\fR, and
\fBsd_uid_get_seats()\fR
interfaces are available as shared library, which can be compiled and linked to with the
libsystemd\-login
\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP

\fBsystemd\fR(1),
\fBsd-login\fR(7),
\fBsd_pid_get_owner_uid\fR(3)
.SH "AUTHOR"
.PP
\fBLennart Poettering\fR <\&lennart@poettering\&.net\&>
.RS 4
Developer
.RE
