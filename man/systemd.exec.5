'\" t
.\"     Title: systemd.exec
.\"    Author: Lennart Poettering <lennart@poettering.net>
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 02/15/2012
.\"    Manual: systemd.exec
.\"    Source: systemd
.\"  Language: English
.\"
.TH "SYSTEMD\&.EXEC" "5" "02/15/2012" "systemd" "systemd.exec"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd.exec \- systemd execution environment configuration
.SH "SYNOPSIS"
.PP
systemd\&.service,
systemd\&.socket,
systemd\&.mount,
systemd\&.swap
.SH "DESCRIPTION"
.PP
Unit configuration files for services, sockets, mount points and swap devices share a subset of configuration options which define the execution environment of spawned processes\&.
.PP
This man page lists the configuration options shared by these four unit types\&. See
\fBsystemd.unit\fR(5)
for the common options of all unit configuration files, and
\fBsystemd.service\fR(5),
\fBsystemd.socket\fR(5),
\fBsystemd.swap\fR(5)
and
\fBsystemd.mount\fR(5)
for more information on the specific unit configuration files\&. The execution specific configuration options are configured in the [Service], [Socket], [Mount] resp\&. [Swap] section, depending on the unit type\&.
.SH "OPTIONS"
.PP
\fIWorkingDirectory=\fR
.RS 4
Takes an absolute directory path\&. Sets the working directory for executed processes\&.
.RE
.PP
\fIRootDirectory=\fR
.RS 4
Takes an absolute directory path\&. Sets the root directory for executed processes, with the
\fBchroot\fR(2)
system call\&. If this is used it must be ensured that the process and all its auxiliary files are available in the
\fBchroot()\fR
jail\&.
.RE
.PP
\fIUser=\fR, \fIGroup=\fR
.RS 4
Sets the Unix user resp\&. group the processes are executed as\&. Takes a single user resp\&. group name or ID as argument\&. If no group is set the default group of the user is chosen\&.
.RE
.PP
\fISupplementaryGroups=\fR
.RS 4
Sets the supplementary Unix groups the processes are executed as\&. This takes a space separated list of group names or IDs\&. This option may be specified more than once in which case all listed groups are set as supplementary groups\&. This option does not override but extends the list of supplementary groups configured in the system group database for the user\&.
.RE
.PP
\fINice=\fR
.RS 4
Sets the default nice level (scheduling priority) for executed processes\&. Takes an integer between \-20 (highest priority) and 19 (lowest priority)\&. See
\fBsetpriority\fR(2)
for details\&.
.RE
.PP
\fIOOMScoreAdjust=\fR
.RS 4
Sets the adjustment level for the Out\-Of\-Memory killer for executed processes\&. Takes an integer between \-1000 (to disable OOM killing for this process) and 1000 (to make killing of this process under memory pressure very likely)\&. See
\m[blue]\fBproc\&.txt\fR\m[]\&\s-2\u[1]\d\s+2
for details\&.
.RE
.PP
\fIIOSchedulingClass=\fR
.RS 4
Sets the IO scheduling class for executed processes\&. Takes an integer between 0 and 3 or one of the strings
\fBnone\fR,
\fBrealtime\fR,
\fBbest\-effort\fR
or
\fBidle\fR\&. See
\fBioprio_set\fR(2)
for details\&.
.RE
.PP
\fIIOSchedulingPriority=\fR
.RS 4
Sets the IO scheduling priority for executed processes\&. Takes an integer between 0 (highest priority) and 7 (lowest priority)\&. The available priorities depend on the selected IO scheduling class (see above)\&. See
\fBioprio_set\fR(2)
for details\&.
.RE
.PP
\fICPUSchedulingPolicy=\fR
.RS 4
Sets the CPU scheduling policy for executed processes\&. Takes one of
\fBother\fR,
\fBbatch\fR,
\fBidle\fR,
\fBfifo\fR
or
\fBrr\fR\&. See
\fBsched_setscheduler\fR(2)
for details\&.
.RE
.PP
\fICPUSchedulingPriority=\fR
.RS 4
Sets the CPU scheduling priority for executed processes\&. Takes an integer between 1 (lowest priority) and 99 (highest priority)\&. The available priority range depends on the selected CPU scheduling policy (see above)\&. See
\fBsched_setscheduler\fR(2)
for details\&.
.RE
.PP
\fICPUSchedulingResetOnFork=\fR
.RS 4
Takes a boolean argument\&. If true elevated CPU scheduling priorities and policies will be reset when the executed processes fork, and can hence not leak into child processes\&. See
\fBsched_setscheduler\fR(2)
for details\&. Defaults to false\&.
.RE
.PP
\fICPUAffinity=\fR
.RS 4
Controls the CPU affinity of the executed processes\&. Takes a space\-separated list of CPU indexes\&. See
\fBsched_setaffinity\fR(2)
for details\&.
.RE
.PP
\fIUMask=\fR
.RS 4
Controls the file mode creation mask\&. Takes an access mode in octal notation\&. See
\fBumask\fR(2)
for details\&. Defaults to 0022\&.
.RE
.PP
\fIEnvironment=\fR
.RS 4
Sets environment variables for executed processes\&. Takes a space\-separated list of variable assignments\&. This option may be specified more than once in which case all listed variables will be set\&. If the same variable is set twice the later setting will override the earlier setting\&. See
\fBenviron\fR(7)
for details\&.
.RE
.PP
\fIEnvironmentFile=\fR
.RS 4
Similar to
\fIEnvironment=\fR
but reads the environment variables from a text file\&. The text file should contain new\-line separated variable assignments\&. Empty lines and lines starting with ; or # will be ignored, which may be used for commenting\&. The parser strips leading and trailing whitespace from the values of assignments, unless you use double quotes (")\&. The argument passed should be an absolute file name, optionally prefixed with "\-", which indicates that if the file does not exist it won\*(Aqt be read and no error or warning message is logged\&. The files listed with this directive will be read shortly before the process is executed\&. Settings from these files override settings made with
\fIEnvironment=\fR\&. If the same variable is set twice from these files the files will be read in the order they are specified and the later setting will override the earlier setting\&.
.RE
.PP
\fIStandardInput=\fR
.RS 4
Controls where file descriptor 0 (STDIN) of the executed processes is connected to\&. Takes one of
\fBnull\fR,
\fBtty\fR,
\fBtty\-force\fR,
\fBtty\-fail\fR
or
\fBsocket\fR\&. If
\fBnull\fR
is selected standard input will be connected to
/dev/null, i\&.e\&. all read attempts by the process will result in immediate EOF\&. If
\fBtty\fR
is selected standard input is connected to a TTY (as configured by
\fITTYPath=\fR, see below) and the executed process becomes the controlling process of the terminal\&. If the terminal is already being controlled by another process the executed process waits until the current controlling process releases the terminal\&.
\fBtty\-force\fR
is similar to
\fBtty\fR, but the executed process is forcefully and immediately made the controlling process of the terminal, potentially removing previous controlling processes from the terminal\&.
\fBtty\-fail\fR
is similar to
\fBtty\fR
but if the terminal already has a controlling process start\-up of the executed process fails\&. The
\fBsocket\fR
option is only valid in socket\-activated services, and only when the socket configuration file (see
\fBsystemd.socket\fR(5)
for details) specifies a single socket only\&. If this option is set standard input will be connected to the socket the service was activated from, which is primarily useful for compatibility with daemons designed for use with the traditional
\fBinetd\fR(8)
daemon\&. This setting defaults to
\fBnull\fR\&.
.RE
.PP
\fIStandardOutput=\fR
.RS 4
Controls where file descriptor 1 (STDOUT) of the executed processes is connected to\&. Takes one of
\fBinherit\fR,
\fBnull\fR,
\fBtty\fR,
\fBsyslog\fR,
\fBkmsg\fR,
\fBjournal\fR,
\fBsyslog+console\fR,
\fBkmsg+console\fR,
\fBjournal+console\fR
or
\fBsocket\fR\&. If set to
\fBinherit\fR
the file descriptor of standard input is duplicated for standard output\&. If set to
\fBnull\fR
standard output will be connected to
/dev/null, i\&.e\&. everything written to it will be lost\&. If set to
\fBtty\fR
standard output will be connected to a tty (as configured via
\fITTYPath=\fR, see below)\&. If the TTY is used for output only the executed process will not become the controlling process of the terminal, and will not fail or wait for other processes to release the terminal\&.
\fBsyslog\fR
connects standard output to the
\fBsyslog\fR(3)
system syslog service\&.
\fBkmsg\fR
connects it with the kernel log buffer which is accessible via
\fBdmesg\fR(1)\&.
\fBjournal\fR
connects it with the journal which is accessible via
\fBsystemd-journalctl\fR(1)
(Note that everything that is written to syslog or kmsg is implicitly stored in the journal as well, those options are hence supersets of this one)\&.
\fBsyslog+console\fR,
\fBjournal+console\fR
and
\fBkmsg+console\fR
work similarly but copy the output to the system console as well\&.
\fBsocket\fR
connects standard output to a socket from socket activation, semantics are similar to the respective option of
\fIStandardInput=\fR\&. This setting defaults to the value set with
\fBDefaultStandardOutput=\fR
in
\fBsystemd.conf\fR(5), which defaults to
\fBjournal\fR\&.
.RE
.PP
\fIStandardError=\fR
.RS 4
Controls where file descriptor 2 (STDERR) of the executed processes is connected to\&. The available options are identical to those of
\fIStandardOutput=\fR, with one exception: if set to
\fBinherit\fR
the file descriptor used for standard output is duplicated for standard error\&. This setting defaults to the value set with
\fBDefaultStandardError=\fR
in
\fBsystemd.conf\fR(5), which defaults to
\fBinherit\fR\&.
.RE
.PP
\fITTYPath=\fR
.RS 4
Sets the terminal device node to use if standard input, output or stderr are connected to a TTY (see above)\&. Defaults to
/dev/console\&.
.RE
.PP
\fITTYReset=\fR
.RS 4
Reset the terminal device specified with
\fITTYPath=\fR
before and after execution\&. Defaults to
no\&.
.RE
.PP
\fITTYVHangup=\fR
.RS 4
Disconnect all clients which have opened the terminal device specified with
\fITTYPath=\fR
before and after execution\&. Defaults to
no\&.
.RE
.PP
\fITTYVTDisallocate=\fR
.RS 4
If the the terminal device specified with
\fITTYPath=\fR
is a virtual console terminal try to deallocate the TTY before and after execution\&. This ensures that the screen and scrollback buffer is cleared\&. Defaults to
no\&.
.RE
.PP
\fISyslogIdentifier=\fR
.RS 4
Sets the process name to prefix log lines sent to syslog or the kernel log buffer with\&. If not set defaults to the process name of the executed process\&. This option is only useful when
\fIStandardOutput=\fR
or
\fIStandardError=\fR
are set to
\fBsyslog\fR
or
\fBkmsg\fR\&.
.RE
.PP
\fISyslogFacility=\fR
.RS 4
Sets the syslog facility to use when logging to syslog\&. One of
\fBkern\fR,
\fBuser\fR,
\fBmail\fR,
\fBdaemon\fR,
\fBauth\fR,
\fBsyslog\fR,
\fBlpr\fR,
\fBnews\fR,
\fBuucp\fR,
\fBcron\fR,
\fBauthpriv\fR,
\fBftp\fR,
\fBlocal0\fR,
\fBlocal1\fR,
\fBlocal2\fR,
\fBlocal3\fR,
\fBlocal4\fR,
\fBlocal5\fR,
\fBlocal6\fR
or
\fBlocal7\fR\&. See
\fBsyslog\fR(3)
for details\&. This option is only useful when
\fIStandardOutput=\fR
or
\fIStandardError=\fR
are set to
\fBsyslog\fR\&. Defaults to
\fBdaemon\fR\&.
.RE
.PP
\fISyslogLevel=\fR
.RS 4
Default syslog level to use when logging to syslog or the kernel log buffer\&. One of
\fBemerg\fR,
\fBalert\fR,
\fBcrit\fR,
\fBerr\fR,
\fBwarning\fR,
\fBnotice\fR,
\fBinfo\fR,
\fBdebug\fR\&. See
\fBsyslog\fR(3)
for details\&. This option is only useful when
\fIStandardOutput=\fR
or
\fIStandardError=\fR
are set to
\fBsyslog\fR
or
\fBkmsg\fR\&. Note that individual lines output by the daemon might be prefixed with a different log level which can be used to override the default log level specified here\&. The interpretation of these prefixes may be disabled with
\fISyslogLevelPrefix=\fR, see below\&. For details see
\fBsd-daemon\fR(7)\&. Defaults to
\fBinfo\fR\&.
.RE
.PP
\fISyslogLevelPrefix=\fR
.RS 4
Takes a boolean argument\&. If true and
\fIStandardOutput=\fR
or
\fIStandardError=\fR
are set to
\fBsyslog\fR
or
\fBkmsg\fR
log lines written by the executed process that are prefixed with a log level will be passed on to syslog with this log level set but the prefix removed\&. If set to false, the interpretation of these prefixes is disabled and the logged lines are passed on as\-is\&. For details about this prefixing see
\fBsd-daemon\fR(7)\&. Defaults to true\&.
.RE
.PP
\fITimerSlackNSec=\fR
.RS 4
Sets the timer slack in nanoseconds for the executed processes\&. The timer slack controls the accuracy of wake\-ups triggered by timers\&. See
\fBprctl\fR(2)
for more information\&. Note that in contrast to most other time span definitions this parameter takes an integer value in nano\-seconds and does not understand any other units\&.
.RE
.PP
\fILimitCPU=\fR, \fILimitFSIZE=\fR, \fILimitDATA=\fR, \fILimitSTACK=\fR, \fILimitCORE=\fR, \fILimitRSS=\fR, \fILimitNOFILE=\fR, \fILimitAS=\fR, \fILimitNPROC=\fR, \fILimitMEMLOCK=\fR, \fILimitLOCKS=\fR, \fILimitSIGPENDING=\fR, \fILimitMSGQUEUE=\fR, \fILimitNICE=\fR, \fILimitRTPRIO=\fR, \fILimitRTTIME=\fR
.RS 4
These settings control various resource limits for executed processes\&. See
\fBsetrlimit\fR(2)
for details\&. Use the string
\fIinfinity\fR
to configure no limit on a specific resource\&.
.RE
.PP
\fIPAMName=\fR
.RS 4
Sets the PAM service name to set up a session as\&. If set the executed process will be registered as a PAM session under the specified service name\&. This is only useful in conjunction with the
\fIUser=\fR
setting\&. If not set no PAM session will be opened for the executed processes\&. See
\fBpam\fR(8)
for details\&.
.RE
.PP
\fITCPWrapName=\fR
.RS 4
If this is a socket\-activated service this sets the tcpwrap service name to check the permission for the current connection with\&. This is only useful in conjunction with socket\-activated services, and stream sockets (TCP) in particular\&. It has no effect on other socket types (e\&.g\&. datagram/UDP) and on processes unrelated to socket\-based activation\&. If the tcpwrap verification fails daemon start\-up will fail and the connection is terminated\&. See
\fBtcpd\fR(8)
for details\&. Note that this option may be used to do access control checks only\&. Shell commands and commands described in
\fBhosts_options\fR(5)
are not supported\&.
.RE
.PP
\fICapabilityBoundingSet=\fR
.RS 4
Controls which capabilities to include in the capability bounding set for the executed process\&. See
\fBcapabilities\fR(7)
for details\&. Takes a whitespace separated list of capability names as read by
\fBcap_from_name\fR(3)\&. Capabilities listed will be included in the bounding set, all others are removed\&. If the list of capabilities is prefixed with ~ all but the listed capabilities will be included, the effect of the assignment inverted\&. Note that this option does not actually set or unset any capabilities in the effective, permitted or inherited capability sets\&. That\*(Aqs what
\fICapabilities=\fR
is for\&. If this option is not used the capability bounding set is not modified on process execution, hence no limits on the capabilities of the process are enforced\&.
.RE
.PP
\fISecureBits=\fR
.RS 4
Controls the secure bits set for the executed process\&. See
\fBcapabilities\fR(7)
for details\&. Takes a list of strings:
\fBkeep\-caps\fR,
\fBkeep\-caps\-locked\fR,
\fBno\-setuid\-fixup\fR,
\fBno\-setuid\-fixup\-locked\fR,
\fBnoroot\fR
and/or
\fBnoroot\-locked\fR\&.
.RE
.PP
\fICapabilities=\fR
.RS 4
Controls the
\fBcapabilities\fR(7)
set for the executed process\&. Take a capability string describing the effective, permitted and inherited capability sets as documented in
\fBcap_from_text\fR(3)\&. Note that these capability sets are usually influenced by the capabilities attached to the executed file\&. Due to that
\fICapabilityBoundingSet=\fR
is probably the much more useful setting\&.
.RE
.PP
\fIControlGroup=\fR
.RS 4
Controls the control groups the executed processes shall be made members of\&. Takes a space\-separated list of cgroup identifiers\&. A cgroup identifier has a format like
cpu:/foo/bar, where "cpu" identifies the kernel control group controller used, and
/foo/bar
is the control group path\&. The controller name and ":" may be omitted in which case the named systemd control group hierarchy is implied\&. Alternatively, the path and ":" may be omitted, in which case the default control group path for this unit is implied\&. This option may be used to place executed processes in arbitrary groups in arbitrary hierarchies \-\- which can be configured externally with additional execution limits\&. By default systemd will place all executed processes in separate per\-unit control groups (named after the unit) in the systemd named hierarchy\&. Since every process can be in one group per hierarchy only overriding the control group path in the named systemd hierarchy will disable automatic placement in the default group\&. This option is primarily intended to place executed processes in specific paths in specific kernel controller hierarchies\&. It is however not recommended to manipulate the service control group path in the systemd named hierarchy\&. For details about control groups see
\m[blue]\fBcgroups\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&.
.RE
.PP
\fIControlGroupModify=\fR
.RS 4
Takes a boolean argument\&. If true, the control groups created for this unit will be owned by the user specified with
\fIUser=\fR
(and the appropriate group), and he/she can create subgroups as well as add processes to the group\&.
.RE
.PP
\fIControlGroupPersistent=\fR
.RS 4
Takes a boolean argument\&. If true, the control groups created for this unit will be marked to be persistent, i\&.e\&. systemd will not remove them when stopping the unit\&. The default is false, meaning that the control groups will be removed when the unit is stopped\&. For details about the semantics of this logic see
\m[blue]\fBPaxControlGroups\fR\m[]\&\s-2\u[3]\d\s+2\&.
.RE
.PP
\fIControlGroupAttribute=\fR
.RS 4
Set a specific control group attribute for executed processes, and (if needed) add the the executed processes to a cgroup in the hierarchy of the controller the attribute belongs to\&. Takes two space\-separated arguments: the attribute name (syntax is
cpu\&.shares
where
cpu
refers to a specific controller and
shares
to the attribute name), and the attribute value\&. Example:
ControlGroupAttribute=cpu\&.shares 512\&. If this option is used for an attribute that belongs to a kernel controller hierarchy the unit is not already configured to be added to (for example via the
ControlGroup=
option) then the unit will be added to the controller and the default unit cgroup path is implied\&. Thus, using
\fIControlGroupAttribute=\fR
is in most case sufficient to make use of control group enforcements, explicit
\fIControlGroup=\fR
are only necessary in case the implied default control group path for a service is not desirable\&. For details about control group attributes see
\m[blue]\fBcgroups\&.txt\fR\m[]\&\s-2\u[2]\d\s+2\&. This option may appear more than once, in order to set multiple control group attributes\&.
.RE
.PP
\fICPUShares=\fR
.RS 4
Assign the specified overall CPU time shares to the processes executed\&. Takes an integer value\&. This controls the
cpu\&.shares
control group attribute, which defaults to 1024\&. For details about this control group attribute see
\m[blue]\fBsched\-design\-CFS\&.txt\fR\m[]\&\s-2\u[4]\d\s+2\&.
.RE
.PP
\fIMemoryLimit=\fR, \fIMemorySoftLimit=\fR
.RS 4
Limit the overall memory usage of the executed processes to a certain size\&. Takes a memory size in bytes\&. If the value is suffixed with K, M, G or T the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, resp\&. Terabytes (to the base 1024)\&. This controls the
memory\&.limit_in_bytes
and
memory\&.soft_limit_in_bytes
control group attributes\&. For details about these control group attributes see
\m[blue]\fBmemory\&.txt\fR\m[]\&\s-2\u[5]\d\s+2\&.
.RE
.PP
\fIDeviceAllow=\fR, \fIDeviceDeny=\fR
.RS 4
Control access to specific device nodes by the executed processes\&. Takes two space separated strings: a device node path (such as
/dev/null) followed by a combination of r, w, m to control reading, writing resp\&. creating of the specific device node by the unit\&. This controls the
devices\&.allow
and
devices\&.deny
control group attributes\&. For details about these control group attributes see
\m[blue]\fBdevices\&.txt\fR\m[]\&\s-2\u[6]\d\s+2\&.
.RE
.PP
\fIBlockIOWeight=\fR
.RS 4
Set the default or per\-device overall block IO weight value for the executed processes\&. Takes either a single weight value (between 10 and 1000) to set the default block IO weight, or a space separated pair of a file path and a weight value to specify the device specific weight value (Example: "/dev/sda 500")\&. The file path may be specified as path to a block device node or as any other file in which case the backing block device of the file system of the file is determined\&. This controls the
blkio\&.weight
and
blkio\&.weight_device
control group attributes, which default to 1000\&. Use this option multiple times to set weights for multiple devices\&. For details about these control group attributes see
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[7]\d\s+2\&.
.RE
.PP
\fIBlockIOReadBandwidth=\fR, \fIBlockIOWriteBandwidth=\fR
.RS 4
Set the per\-device overall block IO bandwith limit for the executed processes\&. Takes a space separated pair of a file path and a bandwith value (in bytes per second) to specify the device specific bandwidth\&. The file path may be specified as path to a block device node or as any other file in which case the backing block device of the file system of the file is determined\&. If the bandwith is suffixed with K, M, G, or T the specified bandwith is parsed as Kilobytes, Megabytes, Gigabytes, resp\&. Terabytes (Example: "/dev/disk/by\-path/pci\-0000:00:1f\&.2\-scsi\-0:0:0:0 5M")\&. This controls the
blkio\&.read_bps_device
and
blkio\&.write_bps_device
control group attributes\&. Use this option multiple times to set bandwith limits for multiple devices\&. For details about these control group attributes see
\m[blue]\fBblkio\-controller\&.txt\fR\m[]\&\s-2\u[7]\d\s+2\&.
.RE
.PP
\fIReadWriteDirectories=\fR, \fIReadOnlyDirectories=\fR, \fIInaccessibleDirectories=\fR
.RS 4
Sets up a new file\-system name space for executed processes\&. These options may be used to limit access a process might have to the main file\-system hierarchy\&. Each setting takes a space\-separated list of absolute directory paths\&. Directories listed in
\fIReadWriteDirectories=\fR
are accessible from within the namespace with the same access rights as from outside\&. Directories listed in
\fIReadOnlyDirectories=\fR
are accessible for reading only, writing will be refused even if the usual file access controls would permit this\&. Directories listed in
\fIInaccessibleDirectories=\fR
will be made inaccessible for processes inside the namespace\&. Note that restricting access with these options does not extend to submounts of a directory\&. You must list submounts separately in these settings to ensure the same limited access\&. These options may be specified more than once in which case all directories listed will have limited access from within the namespace\&.
.RE
.PP
\fIPrivateTmp=\fR
.RS 4
Takes a boolean argument\&. If true sets up a new file system namespace for the executed processes and mounts a private
/tmp
directory inside it, that is not shared by processes outside of the namespace\&. This is useful to secure access to temporary files of the process, but makes sharing between processes via
/tmp
impossible\&. Defaults to false\&.
.RE
.PP
\fIPrivateNetwork=\fR
.RS 4
Takes a boolean argument\&. If true sets up a new network namespace for the executed processes and configures only the loopback network device
lo
inside it\&. No other network devices will be available to the executed process\&. This is useful to securely turn off network access by the executed process\&. Defaults to false\&.
.RE
.PP
\fIMountFlags=\fR
.RS 4
Takes a mount propagation flag:
\fBshared\fR,
\fBslave\fR
or
\fBprivate\fR, which control whether namespaces set up with
\fIReadWriteDirectories=\fR,
\fIReadOnlyDirectories=\fR
and
\fIInaccessibleDirectories=\fR
receive or propagate new mounts from/to the main namespace\&. See
\fBmount\fR(1)
for details\&. Defaults to
\fBshared\fR, i\&.e\&. the new namespace will both receive new mount points from the main namespace as well as propagate new mounts to it\&.
.RE
.PP
\fIUtmpIdentifier=\fR
.RS 4
Takes a a four character identifier string for an utmp/wtmp entry for this service\&. This should only be set for services such as
\fBgetty\fR
implementations where utmp/wtmp entries must be created and cleared before and after execution\&. If the configured string is longer than four characters it is truncated and the terminal four characters are used\&. This setting interprets %I style string replacements\&. This setting is unset by default, i\&.e\&. no utmp/wtmp entries are created or cleaned up for this service\&.
.RE
.PP
\fIIgnoreSIGPIPE=\fR
.RS 4
Takes a boolean argument\&. If true causes SIGPIPE to be ignored in the executed process\&. Defaults to true, since SIGPIPE generally is useful only in shell pipelines\&.
.RE
.SH "SEE ALSO"
.PP

\fBsystemd\fR(1),
\fBsystemctl\fR(8),
\fBsystemd.unit\fR(5),
\fBsystemd.service\fR(5),
\fBsystemd.socket\fR(5),
\fBsystemd.swap\fR(5),
\fBsystemd.mount\fR(5)
.SH "AUTHOR"
.PP
\fBLennart Poettering\fR <\&lennart@poettering\&.net\&>
.RS 4
Developer
.RE
.SH "NOTES"
.IP " 1." 4
proc.txt
.RS 4
\%http://www.kernel.org/doc/Documentation/filesystems/proc.txt
.RE
.IP " 2." 4
cgroups.txt
.RS 4
\%http://www.kernel.org/doc/Documentation/cgroups/cgroups.txt
.RE
.IP " 3." 4
PaxControlGroups
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/PaxControlGroups
.RE
.IP " 4." 4
sched-design-CFS.txt
.RS 4
\%http://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt
.RE
.IP " 5." 4
memory.txt
.RS 4
\%http://www.kernel.org/doc/Documentation/cgroups/memory.txt
.RE
.IP " 6." 4
devices.txt
.RS 4
\%http://www.kernel.org/doc/Documentation/cgroups/devices.txt
.RE
.IP " 7." 4
blkio-controller.txt
.RS 4
\%http://www.kernel.org/doc/Documentation/cgroups/blkio-controller.txt
.RE
