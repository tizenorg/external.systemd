'\" t
.\"     Title: systemd
.\"    Author: Lennart Poettering <lennart@poettering.net>
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 02/15/2012
.\"    Manual: systemd
.\"    Source: systemd
.\"  Language: English
.\"
.TH "SYSTEMD" "1" "02/15/2012" "systemd" "systemd"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd, init \- systemd System and Service Manager
.SH "SYNOPSIS"
.HP \w'\fBsystemd\ \fR\fB[OPTIONS...]\fR\ 'u
\fBsystemd \fR\fB[OPTIONS...]\fR
.HP \w'\fBinit\ \fR\fB[OPTIONS...]\fR\fB\ \fR\fB{COMMAND}\fR\ 'u
\fBinit \fR\fB[OPTIONS...]\fR\fB \fR\fB{COMMAND}\fR
.SH "DESCRIPTION"
.PP
systemd is a system and service manager for Linux operating systems\&. When run as first process on boot (as PID 1), it acts as init system that brings up and maintains userspace services\&.
.PP
For compatibility with SysV, if systemd is called as
\fBinit\fR
and a PID that is not 1, it will execute
\fBtelinit\fR
and pass all command line arguments unmodified\&. That means
\fBinit\fR
and
\fBtelinit\fR
are mostly equivalent when invoked from normal login sessions\&. See
\fBtelinit\fR(8)
for more information\&.
.PP
When run as system instance, systemd interprets the configuration file
system\&.conf, otherwise
user\&.conf\&. See
\fBsystemd.conf\fR(5)
for more information\&.
.SH "OPTIONS"
.PP
The following options are understood:
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Prints a short help text and exits\&.
.RE
.PP
\fB\-\-test\fR
.RS 4
Determine startup sequence, dump it and exit\&. This is an option useful for debugging only\&.
.RE
.PP
\fB\-\-dump\-configuration\-items\fR
.RS 4
Dump understood unit configuration items\&. This outputs a terse but complete list of configuration items understood in unit definition files\&.
.RE
.PP
\fB\-\-introspect=\fR
.RS 4
Extract D\-Bus interface introspection data\&. This is mostly useful at install time to generate data suitable for the D\-Bus interfaces repository\&. Optionally the interface name for the introspection data may be specified\&. If omitted, the introspection data for all interfaces is dumped\&.
.RE
.PP
\fB\-\-unit=\fR
.RS 4
Set default unit to activate on startup\&. If not specified defaults to
default\&.target\&.
.RE
.PP
\fB\-\-system\fR, \fB\-\-user\fR
.RS 4
Tell systemd to run a system instance (resp\&. user instance), even if the process ID is not 1 (resp\&. is 1), i\&.e\&. systemd is not (resp\&. is) run as init process\&. Normally it should not be necessary to pass these options, as systemd automatically detects the mode it is started in\&. These options are hence of little use except for debugging\&. Note that it is not supported booting and maintaining a full system with systemd running in
\fB\-\-system\fR
mode, but PID not 1\&. In practice, passing
\fB\-\-system\fR
explicitly is only useful in conjunction with
\fB\-\-test\fR\&.
.RE
.PP
\fB\-\-dump\-core\fR
.RS 4
Dump core on crash\&. This switch has no effect when run as user instance\&.
.RE
.PP
\fB\-\-crash\-shell\fR
.RS 4
Run shell on crash\&. This switch has no effect when run as user instance\&.
.RE
.PP
\fB\-\-confirm\-spawn\fR
.RS 4
Ask for confirmation when spawning processes\&. This switch has no effect when run as user instance\&.
.RE
.PP
\fB\-\-show\-status=\fR
.RS 4
Show terse service status information while booting\&. This switch has no effect when run as user instance\&. Takes a boolean argument which may be omitted which is interpreted as
\fBtrue\fR\&.
.RE
.PP
\fB\-\-sysv\-console=\fR
.RS 4
Controls whether output of SysV init scripts will be directed to the console\&. This switch has no effect when run as user instance\&. Takes a boolean argument which may be omitted which is interpreted as
\fBtrue\fR\&.
.RE
.PP
\fB\-\-log\-target=\fR
.RS 4
Set log target\&. Argument must be one of
\fBconsole\fR,
\fBjournal\fR,
\fBsyslog\fR,
\fBkmsg\fR,
\fBjournal\-or\-kmsg\fR,
\fBsyslog\-or\-kmsg\fR,
\fBnull\fR\&.
.RE
.PP
\fB\-\-log\-level=\fR
.RS 4
Set log level\&. As argument this accepts a numerical log level or the well\-known
\fBsyslog\fR(3)
symbolic names (lowercase):
\fBemerg\fR,
\fBalert\fR,
\fBcrit\fR,
\fBerr\fR,
\fBwarning\fR,
\fBnotice\fR,
\fBinfo\fR,
\fBdebug\fR\&.
.RE
.PP
\fB\-\-log\-color=\fR
.RS 4
Highlight important log messages\&. Argument is a boolean value\&. If the argument is omitted it defaults to
\fBtrue\fR\&.
.RE
.PP
\fB\-\-log\-location=\fR
.RS 4
Include code location in log messages\&. This is mostly relevant for debugging purposes\&. Argument is a boolean value\&. If the argument is omitted it defaults to
\fBtrue\fR\&.
.RE
.PP
\fB\-\-default\-standard\-output=\fR, \fB\-\-default\-standard\-error=\fR
.RS 4
Sets the default output resp\&. error output for all services and sockets, i\&.e\&. controls the default for
\fBStandardOutput=\fR
resp\&.
\fBStandardError=\fR
(see
\fBsystemd.exec\fR(5)
for details)\&. Takes one of
\fBinherit\fR,
\fBnull\fR,
\fBtty\fR,
\fBjournal\fR,
\fBjournal+console\fR,
\fBsyslog\fR,
\fBsyslog+console\fR,
\fBkmsg\fR,
\fBkmsg+console\fR\&. If the argument is omitted
\fB\-\-default\-standard\-output=\fR
defaults to
\fBjournal\fR
and
\fB\-\-default\-standard\-error=\fR
to
\fBinherit\fR\&.
.RE
.SH "CONCEPTS"
.PP
systemd provides a dependency system between various entities called "units"\&. Units encapsulate various objects that are relevant for system boot\-up and maintenance\&. The majority of units are configured in unit configuration files, whose syntax and basic set of options is described in
\fBsystemd.unit\fR(5), however some are created automatically from other configuration or dynamically from system state\&. Units may be \*(Aqactive\*(Aq (meaning started, bound, plugged in, \&.\&.\&. depending on the unit type, see below), or \*(Aqinactive\*(Aq (meaning stopped, unbound, unplugged, \&.\&.\&.), as well as in the process of being activated or deactivated, i\&.e\&. between the two states (these states are called \*(Aqactivating\*(Aq, \*(Aqdeactivating\*(Aq)\&. A special \*(Aqfailed\*(Aq state is available as well which is very similar to \*(Aqinactive\*(Aq and is entered when the service failed in some way (process returned error code on exit, or crashed, or an operation timed out)\&. If this state is entered the cause will be logged, for later reference\&. Note that the various unit types may have a number of additional substates, which are mapped to the five generalized unit states described here\&.
.PP
The following unit types are available:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Service units, which control daemons and the processes they consist of\&. For details see
\fBsystemd.service\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Socket units, which encapsulate local IPC or network sockets in the system, useful for socket\-based activation\&. For details about socket units see
\fBsystemd.socket\fR(5), for details on socket\-based activation and other forms of activation, see
\fBdaemon\fR(7)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Target units are useful to group units, or provide well\-known synchronization points during boot\-up, see
\fBsystemd.target\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Device units expose kernel devices in systemd and may be used to implement device\-based activation\&. For details see
\fBsystemd.device\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Mount units control mount points in the file system, for details see
\fBsystemd.mount\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
Automount units provide automount capabilities, for on\-demand mounting of file systems as well as parallelized boot\-up\&. See
\fBsystemd.automount\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
Snapshot units can be used to temporarily save the state of the set of systemd units, which later may be restored by activating the saved snapshot unit\&. For more information see
\fBsystemd.snapshot\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
Timer units are useful for triggering activation of other units based on timers\&. You may find details in
\fBsystemd.timer\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
Swap units are very similar to mount units and encapsulate memory swap partitions or files of the operating system\&. They are described in
\fBsystemd.swap\fR(5)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'10.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "10." 4.2
.\}
Path units may be used to activate other services when file system objects change or are modified\&. See
\fBsystemd.path\fR(5)\&.
.RE
.PP
Units are named as their configuration files\&. Some units have special semantics\&. A detailed list is available in
\fBsystemd.special\fR(7)\&.
.PP
systemd knows various kinds of dependencies, including positive and negative requirement dependencies (i\&.e\&.
\fIRequires=\fR
and
\fIConflicts=\fR) as well as ordering dependencies (\fIAfter=\fR
and
\fIBefore=\fR)\&. NB: ordering and requirement dependencies are orthogonal\&. If only a requirement dependency exists between two units (e\&.g\&.
foo\&.service
requires
bar\&.service), but no ordering dependency (e\&.g\&.
foo\&.service
after
bar\&.service) and both are requested to start, they will be started in parallel\&. It is a common pattern that both requirement and ordering dependencies are placed between two units\&. Also note that the majority of dependencies are implicitly created and maintained by systemd\&. In most cases it should be unnecessary to declare additional dependencies manually, however it is possible to do this\&.
.PP
Application programs and units (via dependencies) may request state changes of units\&. In systemd, these requests are encapsulated as \*(Aqjobs\*(Aq and maintained in a job queue\&. Jobs may succeed or can fail, their execution is ordered based on the ordering dependencies of the units they have been scheduled for\&.
.PP
On boot systemd activates the target unit
default\&.target
whose job is to activate on\-boot services and other on\-boot units by pulling them in via dependencies\&. Usually the unit name is just an alias (symlink) for either
graphical\&.target
(for fully\-featured boots into the UI) or
multi\-user\&.target
(for limited console\-only boots for use in embedded or server environments, or similar; a subset of graphical\&.target)\&. However it is at the discretion of the administrator to configure it as an alias to any other target unit\&. See
\fBsystemd.special\fR(7)
for details about these target units\&.
.PP
Processes systemd spawns are placed in individual Linux control groups named after the unit which they belong to in the private systemd hierarchy\&. (see
\m[blue]\fBcgroups\&.txt\fR\m[]\&\s-2\u[1]\d\s+2
for more information about control groups, or short "cgroups")\&. systemd uses this to effectively keep track of processes\&. Control group information is maintained in the kernel, and is accessible via the file system hierarchy (beneath
/sys/fs/cgroup/systemd/), or in tools such as
\fBps\fR(1)
(\fBps xawf \-eo pid,user,cgroup,args\fR
is particularly useful to list all processes and the systemd units they belong to\&.)\&.
.PP
systemd is compatible with the SysV init system to a large degree: SysV init scripts are supported and simply read as an alternative (though limited) configuration file format\&. The SysV
/dev/initctl
interface is provided, and compatibility implementations of the various SysV client tools are available\&. In addition to that, various established Unix functionality such as
/etc/fstab
or the
utmp
database are supported\&.
.PP
systemd has a minimal transaction system: if a unit is requested to start up or shut down it will add it and all its dependencies to a temporary transaction\&. Then, it will verify if the transaction is consistent (i\&.e\&. whether the ordering of all units is cycle\-free)\&. If it is not, systemd will try to fix it up, and removes non\-essential jobs from the transaction that might remove the loop\&. Also, systemd tries to suppress non\-essential jobs in the transaction that would stop a running service\&. Finally it is checked whether the jobs of the transaction contradict jobs that have already been queued, and optionally the transaction is aborted then\&. If all worked out and the transaction is consistent and minimized in its impact it is merged with all already outstanding jobs and added to the run queue\&. Effectively this means that before executing a requested operation, systemd will verify that it makes sense, fixing it if possible, and only failing if it really cannot work\&.
.PP
Systemd contains native implementations of various tasks that need to be executed as part of the boot process\&. For example, it sets the host name or configures the loopback network device\&. It also sets up and mounts various API file systems, such as
/sys
or
/proc\&.
.PP
For more information about the concepts and ideas behind systemd please refer to the
\m[blue]\fBOriginal Design Document\fR\m[]\&\s-2\u[2]\d\s+2\&.
.PP
Note that some but not all interfaces provided by systemd are covered by the
\m[blue]\fBInterface Stability Promise\fR\m[]\&\s-2\u[3]\d\s+2\&.
.SH "DIRECTORIES"
.PP
System unit directories
.RS 4
The systemd system manager reads unit configuration from various directories\&. Packages that want to install unit files shall place them in the directory returned by
\fBpkg\-config systemd \-\-variable=systemdsystemunitdir\fR\&. Other directories checked are
/usr/local/lib/systemd/system
and
/usr/lib/systemd/system\&. User configuration always takes precedence\&.
\fBpkg\-config systemd \-\-variable=systemdsystemconfdir\fR
returns the path of the system configuration directory\&. Packages should alter the content of these directories only with the
\fBenable\fR
and
\fBdisable\fR
commands of the
\fBsystemctl\fR(1)
tool\&.
.RE
.PP
User unit directories
.RS 4
Similar rules apply for the user unit directories\&. However, here the
\m[blue]\fBXDG Base Directory specification\fR\m[]\&\s-2\u[4]\d\s+2
is followed to find units\&. Applications should place their unit files in the directory returned by
\fBpkg\-config systemd \-\-variable=systemduserunitdir\fR\&. Global configuration is done in the directory reported by
\fBpkg\-config systemd \-\-variable=systemduserconfdir\fR\&. The
\fBenable\fR
and
\fBdisable\fR
commands of the
\fBsystemctl\fR(1)
tool can handle both global (i\&.e\&. for all users) and private (for one user) enabling/disabling of units\&.
.RE
.PP
SysV init scripts directory
.RS 4
The location of the SysV init script directory varies between distributions\&. If systemd cannot find a native unit file for a requested service, it will look for a SysV init script of the same name (with the
\&.service
suffix removed)\&.
.RE
.PP
SysV runlevel link farm directory
.RS 4
The location of the SysV runlevel link farm directory varies between distributions\&. systemd will take the link farm into account when figuring out whether a service shall be enabled\&. Note that a service unit with a native unit configuration file cannot be started by activating it in the SysV runlevel link farm\&.
.RE
.SH "SIGNALS"
.PP
SIGTERM
.RS 4
Upon receiving this signal the systemd system manager serializes its state, reexecutes itself and deserializes the saved state again\&. This is mostly equivalent to
\fBsystemctl daemon\-reexec\fR\&.
.sp
systemd user managers will start the
exit\&.target
unit when this signal is received\&. This is mostly equivalent to
\fBsystemctl \-\-user start exit\&.target\fR\&.
.RE
.PP
SIGINT
.RS 4
Upon receiving this signal the systemd system manager will start the
ctrl\-alt\-del\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start ctl\-alt\-del\&.target\fR\&.
.sp
systemd user managers treat this signal the same way as SIGTERM\&.
.RE
.PP
SIGWINCH
.RS 4
When this signal is received the systemd system manager will start the
kbrequest\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start kbrequest\&.target\fR\&.
.sp
This signal is ignored by systemd user managers\&.
.RE
.PP
SIGPWR
.RS 4
When this signal is received the systemd manager will start the
sigpwr\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start sigpwr\&.target\fR\&.
.RE
.PP
SIGUSR1
.RS 4
When this signal is received the systemd manager will try to reconnect to the D\-Bus bus\&.
.RE
.PP
SIGUSR2
.RS 4
When this signal is received the systemd manager will log its complete state in human readable form\&. The data logged is the same as printed by
\fBsystemctl dump\fR\&.
.RE
.PP
SIGHUP
.RS 4
Reloads the complete daemon configuration\&. This is mostly equivalent to
\fBsystemctl daemon\-reload\fR\&.
.RE
.PP
SIGRTMIN+0
.RS 4
Enters default mode, starts the
default\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start default\&.target\fR\&.
.RE
.PP
SIGRTMIN+1
.RS 4
Enters rescue mode, starts the
rescue\&.target
unit\&. This is mostly equivalent to
\fBsystemctl isolate rescue\&.target\fR\&.
.RE
.PP
SIGRTMIN+2
.RS 4
Enters emergency mode, starts the
emergency\&.service
unit\&. This is mostly equivalent to
\fBsystemctl isolate emergency\&.service\fR\&.
.RE
.PP
SIGRTMIN+3
.RS 4
Halts the machine, starts the
halt\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start halt\&.target\fR\&.
.RE
.PP
SIGRTMIN+4
.RS 4
Powers off the machine, starts the
poweroff\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start poweroff\&.target\fR\&.
.RE
.PP
SIGRTMIN+5
.RS 4
Reboots the machine, starts the
reboot\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start reboot\&.target\fR\&.
.RE
.PP
SIGRTMIN+6
.RS 4
Reboots the machine via kexec, starts the
kexec\&.target
unit\&. This is mostly equivalent to
\fBsystemctl start kexec\&.target\fR\&.
.RE
.PP
SIGRTMIN+13
.RS 4
Immediately halts the machine\&.
.RE
.PP
SIGRTMIN+14
.RS 4
Immediately powers off the machine\&.
.RE
.PP
SIGRTMIN+15
.RS 4
Immediately reboots the machine\&.
.RE
.PP
SIGRTMIN+16
.RS 4
Immediately reboots the machine with kexec\&.
.RE
.PP
SIGRTMIN+20
.RS 4
Enables display of status messages on the console, as controlled via
\fIsystemd\&.show_status=1\fR
on the kernel command line\&.
.RE
.PP
SIGRTMIN+21
.RS 4
Disables display of status messages on the console, as controlled via
\fIsystemd\&.show_status=0\fR
on the kernel command line\&.
.RE
.PP
SIGRTMIN+22, SIGRTMIN+23
.RS 4
Sets the log level to
debug
(resp\&.
info
on
SIGRTMIN+23), as controlled via
\fIsystemd\&.log_level=debug\fR
(resp\&.
\fIsystemd\&.log_level=info\fR
on
SIGRTMIN+23) on the kernel command line\&.
.RE
.PP
SIGRTMIN+26, SIGRTMIN+27, SIGRTMIN+28, SIGRTMIN+29
.RS 4
Sets the log level to
journal\-or\-kmsg
(resp\&.
console
on
SIGRTMIN+27; resp\&.
kmsg
on
SIGRTMIN+28; resp\&.
syslog\-or\-kmsg
on
SIGRTMIN+29), as controlled via
\fIsystemd\&.log_target=journal\-or\-kmsg\fR
(resp\&.
\fIsystemd\&.log_target=console\fR
on
SIGRTMIN+27; resp\&.
\fIsystemd\&.log_target=kmsg\fR
on
SIGRTMIN+28; resp
\fIsystemd\&.log_target=syslog\-or\-kmsg\fR
on
SIGRTMIN+29) on the kernel command line\&.
.RE
.SH "ENVIRONMENT"
.PP
\fI$SYSTEMD_LOG_LEVEL\fR
.RS 4
systemd reads the log level from this environment variable\&. This can be overridden with
\fB\-\-log\-level=\fR\&.
.RE
.PP
\fI$SYSTEMD_LOG_TARGET\fR
.RS 4
systemd reads the log target from this environment variable\&. This can be overridden with
\fB\-\-log\-target=\fR\&.
.RE
.PP
\fI$SYSTEMD_LOG_COLOR\fR
.RS 4
Controls whether systemd highlights important log messages\&. This can be overridden with
\fB\-\-log\-color=\fR\&.
.RE
.PP
\fI$SYSTEMD_LOG_LOCATION\fR
.RS 4
Controls whether systemd prints the code location along with log messages\&. This can be overridden with
\fB\-\-log\-location=\fR\&.
.RE
.PP
\fI$XDG_CONFIG_HOME\fR, \fI$XDG_CONFIG_DIRS\fR, \fI$XDG_DATA_HOME\fR, \fI$XDG_DATA_DIRS\fR
.RS 4
The systemd user manager uses these variables in accordance to the
\m[blue]\fBXDG Base Directory specification\fR\m[]\&\s-2\u[4]\d\s+2
to find its configuration\&.
.RE
.PP
\fI$SYSTEMD_UNIT_PATH\fR
.RS 4
Controls where systemd looks for unit files\&.
.RE
.PP
\fI$SYSTEMD_SYSVINIT_PATH\fR
.RS 4
Controls where systemd looks for SysV init scripts\&.
.RE
.PP
\fI$SYSTEMD_SYSVRCND_PATH\fR
.RS 4
Controls where systemd looks for SysV init script runlevel link farms\&.
.RE
.PP
\fI$LISTEN_PID\fR, \fI$LISTEN_FDS\fR
.RS 4
Set by systemd for supervised processes during socket\-based activation\&. See
\fBsd_listen_fds\fR(3)
for more information\&.
.RE
.PP
\fI$NOTIFY_SOCKET\fR
.RS 4
Set by systemd for supervised processes for status and start\-up completion notification\&. See
\fBsd_notify\fR(3)
for more information\&.
.RE
.SH "KERNEL COMMAND LINE"
.PP
When run as system instance systemd parses a few kernel command line arguments:
.PP
\fIsystemd\&.unit=\fR
.RS 4
Overrides the unit to activate on boot\&. Defaults to
default\&.target\&. This may be used to temporarily boot into a different boot unit, for example
rescue\&.target
or
emergency\&.service\&. See
\fBsystemd.special\fR(7)
for details about these units\&.
.RE
.PP
\fIsystemd\&.dump_core=\fR
.RS 4
Takes a boolean argument\&. If
\fBtrue\fR
systemd dumps core when it crashes\&. Otherwise no core dump is created\&. Defaults to
\fBtrue\fR\&.
.RE
.PP
\fIsystemd\&.crash_shell=\fR
.RS 4
Takes a boolean argument\&. If
\fBtrue\fR
systemd spawns a shell when it crashes\&. Otherwise no shell is spawned\&. Defaults to
\fBfalse\fR, for security reasons, as the shell is not protected by any password authentication\&.
.RE
.PP
\fIsystemd\&.crash_chvt=\fR
.RS 4
Takes an integer argument\&. If positive systemd activates the specified virtual terminal when it crashes\&. Defaults to
\-1\&.
.RE
.PP
\fIsystemd\&.confirm_spawn=\fR
.RS 4
Takes a boolean argument\&. If
\fBtrue\fR
asks for confirmation when spawning processes\&. Defaults to
\fBfalse\fR\&.
.RE
.PP
\fIsystemd\&.show_status=\fR
.RS 4
Takes a boolean argument\&. If
\fBtrue\fR
shows terse service status updates on the console during bootup\&. Defaults to
\fBtrue\fR\&.
.RE
.PP
\fIsystemd\&.sysv_console=\fR
.RS 4
Takes a boolean argument\&. If
\fBtrue\fR
output of SysV init scripts will be directed to the console\&. Defaults to
\fBtrue\fR, unless
\fBquiet\fR
is passed as kernel command line option in which case it defaults to
\fBfalse\fR\&.
.RE
.PP
\fIsystemd\&.log_target=\fR, \fIsystemd\&.log_level=\fR, \fIsystemd\&.log_color=\fR, \fIsystemd\&.log_location=\fR
.RS 4
Controls log output, with the same effect as the
\fI$SYSTEMD_LOG_TARGET\fR,
\fI$SYSTEMD_LOG_LEVEL\fR,
\fI$SYSTEMD_LOG_COLOR\fR,
\fI$SYSTEMD_LOG_LOCATION\fR
environment variables described above\&.
.RE
.PP
\fIsystemd\&.default_standard_output=\fR, \fIsystemd\&.default_standard_error=\fR
.RS 4
Controls default standard output/error output for services, with the same effect as the
\fB\-\-default\-standard\-output=\fR
resp\&.
\fB\-\-default\-standard\-error=\fR
command line arguments described above\&.
.RE
.PP
\fIsystemd\&.setenv=\fR
.RS 4
Takes a string argument in the form VARIABLE=VALUE\&. May be used to set environment variables for the init process and all its children at boot time\&. May be used more than once to set multiple variables\&. If the equal sign and variable are missing unsets an environment variable which might be passed in from the initial ram disk\&.
.RE
.SH "SOCKETS AND FIFOS"
.PP
/run/systemd/notify
.RS 4
Daemon status notification socket\&. This is an AF_UNIX datagram socket and is used to implement the daemon notification logic as implemented by
\fBsd_notify\fR(3)\&.
.RE
.PP
/run/systemd/shutdownd
.RS 4
Used internally by the
\fBshutdown\fR(8)
tool to implement delayed shutdowns\&. This is an AF_UNIX datagram socket\&.
.RE
.PP
/run/systemd/private
.RS 4
Used internally as communication channel between
\fBsystemctl\fR(1)
and the systemd process\&. This is an AF_UNIX stream socket\&. This interface is private to systemd and should not be used in external projects\&.
.RE
.PP
/dev/initctl
.RS 4
Limited compatibility support for the SysV client interface, as implemented by the
systemd\-initctl\&.service
unit\&. This is a named pipe in the file system\&. This interface is obsolete and should not be used in new applications\&.
.RE
.SH "SEE ALSO"
.PP

\fBsystemctl\fR(1),
\fBsystemadm\fR(1),
\fBsystemd-notify\fR(1),
\fBdaemon\fR(7),
\fBsd-daemon\fR(7),
\fBsystemd.unit\fR(5),
\fBsystemd.special\fR(5),
\fBpkg-config\fR(1)
.SH "AUTHOR"
.PP
\fBLennart Poettering\fR <\&lennart@poettering\&.net\&>
.RS 4
Developer
.RE
.SH "NOTES"
.IP " 1." 4
cgroups.txt
.RS 4
\%http://www.kernel.org/doc/Documentation/cgroups/cgroups.txt
.RE
.IP " 2." 4
Original Design Document
.RS 4
\%http://0pointer.de/blog/projects/systemd.html
.RE
.IP " 3." 4
Interface Stability Promise
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/InterfaceStabilityPromise
.RE
.IP " 4." 4
XDG Base Directory specification
.RS 4
\%http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
.RE
