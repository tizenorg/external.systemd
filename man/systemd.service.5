'\" t
.\"     Title: systemd.service
.\"    Author: Lennart Poettering <lennart@poettering.net>
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 02/15/2012
.\"    Manual: systemd.service
.\"    Source: systemd
.\"  Language: English
.\"
.TH "SYSTEMD\&.SERVICE" "5" "02/15/2012" "systemd" "systemd.service"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd.service \- systemd service configuration files
.SH "SYNOPSIS"
.PP
systemd\&.service
.SH "DESCRIPTION"
.PP
A unit configuration file whose name ends in
\&.service
encodes information about a process controlled and supervised by systemd\&.
.PP
This man page lists the configuration options specific to this unit type\&. See
\fBsystemd.unit\fR(5)
for the common options of all unit configuration files\&. The common configuration items are configured in the generic
[Unit]
and
[Install]
sections\&. The service specific configuration options are configured in the
[Service]
section\&.
.PP
Additional options are listed in
\fBsystemd.exec\fR(5), which define the execution environment the commands are executed in\&.
.PP
Unless
\fIDefaultDependencies=\fR
is set to
\fBfalse\fR, service units will implicitly have dependencies of type
\fIRequires=\fR
and
\fIAfter=\fR
on
basic\&.target
as well as dependencies of type
\fIConflicts=\fR
and
\fIBefore=\fR
on
shutdown\&.target\&. These ensure that normal service units pull in basic system initialization, and are terminated cleanly prior to system shutdown\&. Only services involved with early boot or late system shutdown should disable this option\&.
.PP
If a service is requested under a certain name but no unit configuration file is found, systemd looks for a SysV init script by the same name (with the
\&.service
suffix removed) and dynamically creates a service unit from that script\&. This is useful for compatibility with SysV\&.
.SH "OPTIONS"
.PP
Service files must include a
[Service]
section, which carries information about the service and the process it supervises\&. A number of options that may be used in this section are shared with other unit types\&. These options are documented in
\fBsystemd.exec\fR(5)\&. The options specific to the
[Service]
section of service units are the following:
.PP
\fIType=\fR
.RS 4
Configures the process start\-up type for this service unit\&. One of
\fBsimple\fR,
\fBforking\fR,
\fBoneshot\fR,
\fBdbus\fR,
\fBnotify\fR\&.
.sp
If set to
\fBsimple\fR
(the default value) it is expected that the process configured with
\fIExecStart=\fR
is the main process of the service\&. In this mode, if the process offers functionality to other processes on the system its communication channels should be installed before the daemon is started up (e\&.g\&. sockets set up by systemd, via socket activation), as systemd will immediately proceed starting follow\-up units\&.
.sp
If set to
\fBforking\fR
it is expected that the process configured with
\fIExecStart=\fR
will call
\fBfork()\fR
as part of its start\-up\&. The parent process is expected to exit when start\-up is complete and all communication channels set up\&. The child continues to run as the main daemon process\&. This is the behaviour of traditional UNIX daemons\&. If this setting is used, it is recommended to also use the
\fIPIDFile=\fR
option, so that systemd can identify the main process of the daemon\&. systemd will proceed starting follow\-up units as soon as the parent process exits\&.
.sp
Behaviour of
\fBoneshot\fR
is similar to
\fBsimple\fR, however it is expected that the process has to exit before systemd starts follow\-up units\&.
\fIRemainAfterExit=\fR
is particularly useful for this type of service\&.
.sp
Behaviour of
\fBdbus\fR
is similar to
\fBsimple\fR, however it is expected that the daemon acquires a name on the D\-Bus bus, as configured by
\fIBusName=\fR\&. systemd will proceed starting follow\-up units after the D\-Bus bus name has been acquired\&. Service units with this option configured implicitly gain dependencies on the
dbus\&.socket
unit\&.
.sp
Behaviour of
\fBnotify\fR
is similar to
\fBsimple\fR, however it is expected that the daemon sends a notification message via
\fBsd_notify\fR(3)
or an equivalent call when it finished starting up\&. systemd will proceed starting follow\-up units after this notification message has been sent\&. If this option is used
\fINotifyAccess=\fR
(see below) should be set to open access to the notification socket provided by systemd\&. If
\fINotifyAccess=\fR
is not set, it will be implicitly set to
\fBmain\fR\&.
.RE
.PP
\fIRemainAfterExit=\fR
.RS 4
Takes a boolean value that specifies whether the service shall be considered active even when all its processes exited\&. Defaults to
\fBno\fR\&.
.RE
.PP
\fIGuessMainPID=\fR
.RS 4
Takes a boolean value that specifies whether systemd should try to guess the main PID of a service should if it cannot be determined reliably\&. This option is ignored unless
\fBType=forking\fR
is set and
\fBPIDFile=\fR
is unset because for the other types or with an explicitly configured PID file the main PID is always known\&. The guessing algorithm might come to incorrect conclusions if a daemon consists of more than one process\&. If the main PID cannot be determined failure detection and automatic restarting of a service will not work reliably\&. Defaults to
\fByes\fR\&.
.RE
.PP
\fIPIDFile=\fR
.RS 4
Takes an absolute file name pointing to the PID file of this daemon\&. Use of this option is recommended for services where
\fIType=\fR
is set to
\fBforking\fR\&. systemd will read the PID of the main process of the daemon after start\-up of the service\&. systemd will not write to the file configured here\&.
.RE
.PP
\fIBusName=\fR
.RS 4
Takes a D\-Bus bus name, where this service is reachable as\&. This option is mandatory for services where
\fIType=\fR
is set to
\fBdbus\fR, but its use is otherwise recommended as well if the process takes a name on the D\-Bus bus\&.
.RE
.PP
\fIExecStart=\fR
.RS 4
Takes a command line that is executed when this service shall be started up\&. The first token of the command line must be an absolute file name, then followed by arguments for the process\&. It is mandatory to set this option for all services\&. This option may not be specified more than once, except when
\fIType=oneshot\fR
is used in which case more than one
\fIExecStart=\fR
line is accepted which are then invoked one by one, sequentially in the order they appear in the unit file\&.
.sp
Optionally, if the absolute file name is prefixed with
@, the second token will be passed as
argv[0]
to the executed process, followed by the further arguments specified\&. If the first token is prefixed with
\-
an exit code of the command normally considered a failure (i\&.e\&. non\-zero exit status or abnormal exit due to signal) is ignored and considered success\&. If both
\-
and
@
are used for the same command the former must precede the latter\&. Unless
\fIType=forking\fR
is set, the process started via this command line will be considered the main process of the daemon\&. The command line accepts % specifiers as described in
\fBsystemd.unit\fR(5)\&.
.sp
On top of that basic environment variable substitution is supported\&. Use
${FOO}
as part of a word, or as word of its own on the command line, in which case it will be replaced by the value of the environment variable including all whitespace it contains, resulting in a single argument\&. Use
$FOO
as a separate word on the command line, in which case it will be replaced by the value of the environment variable split up at whitespace, resulting in no or more arguments\&. Note that the first argument (i\&.e\&. the program to execute) may not be a variable, and must be a literal and absolute path name\&.
.RE
.PP
\fIExecStartPre=\fR, \fIExecStartPost=\fR
.RS 4
Additional commands that are executed before (resp\&. after) the command in
\fIExecStart=\fR\&. Multiple command lines may be concatenated in a single directive, by separating them by semicolons (these semicolons must be passed as separate words)\&. In that case, the commands are executed one after the other, serially\&. Alternatively, these directives may be specified more than once with the same effect\&. However, the latter syntax is not recommended for compatibility with parsers suitable for XDG
\&.desktop
files\&. Use of these settings is optional\&. Specifier and environment variable substitution is supported\&.
.RE
.PP
\fIExecReload=\fR
.RS 4
Commands to execute to trigger a configuration reload in the service\&. This argument takes multiple command lines, following the same scheme as pointed out for
\fIExecStartPre=\fR
above\&. Use of this setting is optional\&. Specifier and environment variable substitution is supported here following the same scheme as for
\fIExecStart=\fR\&. One special environment variable is set: if known
$MAINPID
is set to the main process of the daemon, and may be used for command lines like the following:
\fB/bin/kill \-HUP $MAINPID\fR\&.
.RE
.PP
\fIExecStop=\fR
.RS 4
Commands to execute to stop the service started via
\fIExecStart=\fR\&. This argument takes multiple command lines, following the same scheme as pointed out for
\fIExecStartPre=\fR
above\&. Use of this setting is optional\&. All processes remaining for a service after the commands configured in this option are run are terminated according to the
\fIKillMode=\fR
setting (see below)\&. If this option is not specified the process is terminated right\-away when service stop is requested\&. Specifier and environment variable substitution is supported (including
$MAINPID, see above)\&.
.RE
.PP
\fIExecStopPost=\fR
.RS 4
Additional commands that are executed after the service was stopped using the commands configured in
\fIExecStop=\fR\&. This argument takes multiple command lines, following the same scheme as pointed out for
\fIExecStartPre\fR\&. Use of these settings is optional\&. Specifier and environment variable substitution is supported\&.
.RE
.PP
\fIRestartSec=\fR
.RS 4
Configures the time to sleep before restarting a service (as configured with
\fIRestart=\fR)\&. Takes a unit\-less value in seconds, or a time span value such as "5min 20s"\&. Defaults to 100ms\&.
.RE
.PP
\fITimeoutSec=\fR
.RS 4
Configures the time to wait for start\-up and stop\&. If a daemon service does not signal start\-up completion within the configured time the service will be considered failed and be shut down again\&. If a service is asked to stop but does not terminate in the specified time it will be terminated forcibly via SIGTERM, and after another delay of this time with SIGKILL\&. (See
\fIKillMode=\fR
below\&.) Takes a unit\-less value in seconds, or a time span value such as "5min 20s"\&. Pass 0 to disable the timeout logic\&. Defaults to 90s\&.
.RE
.PP
\fIWatchdogSec=\fR
.RS 4
Configures the watchdog timeout for a service\&. This is activated when the start\-up is completed\&. The service must call
\fBsd_notify\fR(3)
regularly with "WATCHDOG=1"\&. If the time between two such calls is larger than the configured time then the service is placed in a failure state\&. By setting
\fIRestart=\fR
to
\fBon\-failure\fR
or
\fBalways\fR
the service will be automatically restarted\&. The time configured here will be passed to the executed service process in the
\fIWATCHDOG_USEC=\fR
environment variable\&. If this option is used
\fINotifyAccess=\fR
(see below) should be set to open access to the notification socket provided by systemd\&. If
\fINotifyAccess=\fR
is not set, it will be implicitly set to
\fBmain\fR\&. Defaults to 0, which disables this feature\&.
.RE
.PP
\fIRestart=\fR
.RS 4
Configures whether the main service process shall be restarted when it exits\&. Takes one of
\fBno\fR,
\fBon\-success\fR,
\fBon\-failure\fR,
\fBon\-abort\fR
or
\fBalways\fR\&. If set to
\fBno\fR
(the default) the service will not be restarted when it exits\&. If set to
\fBon\-success\fR
it will be restarted only when it exited cleanly, i\&.e\&. terminated with an exit code of 0\&. If set to
\fBon\-failure\fR
it will be restarted only when it exited with an exit code not equalling 0, when terminated by a signal, when an operation times out or when the configured watchdog timeout is triggered\&. If set to
\fBon\-abort\fR
it will be restarted only if it exits due to reception of an uncaught signal\&. If set to
\fBalways\fR
the service will be restarted regardless whether it exited cleanly or not, got terminated abnormally by a signal or hit a timeout\&.
.RE
.PP
\fIPermissionsStartOnly=\fR
.RS 4
Takes a boolean argument\&. If true, the permission related execution options as configured with
\fIUser=\fR
and similar options (see
\fBsystemd.exec\fR(5)
for more information) are only applied to the process started with
\fIExecStart=\fR, and not to the various other
\fIExecStartPre=\fR,
\fIExecStartPost=\fR,
\fIExecReload=\fR,
\fIExecStop=\fR,
\fIExecStopPost=\fR
commands\&. If false, the setting is applied to all configured commands the same way\&. Defaults to false\&.
.RE
.PP
\fIRootDirectoryStartOnly=\fR
.RS 4
Takes a boolean argument\&. If true, the root directory as configured with the
\fIRootDirectory=\fR
option (see
\fBsystemd.exec\fR(5)
for more information) is only applied to the process started with
\fIExecStart=\fR, and not to the various other
\fIExecStartPre=\fR,
\fIExecStartPost=\fR,
\fIExecReload=\fR,
\fIExecStop=\fR,
\fIExecStopPost=\fR
commands\&. If false, the setting is applied to all configured commands the same way\&. Defaults to false\&.
.RE
.PP
\fISysVStartPriority=\fR
.RS 4
Set the SysV start priority to use to order this service in relation to SysV services lacking LSB headers\&. This option is only necessary to fix ordering in relation to legacy SysV services, that have no ordering information encoded in the script headers\&. As such it should only be used as temporary compatibility option, and not be used in new unit files\&. Almost always it is a better choice to add explicit ordering directives via
\fIAfter=\fR
or
\fIBefore=\fR, instead\&. For more details see
\fBsystemd.unit\fR(5)\&. If used, pass an integer value in the range 0\-99\&.
.RE
.PP
\fIKillMode=\fR
.RS 4
Specifies how processes of this service shall be killed\&. One of
\fBcontrol\-group\fR,
\fBprocess\fR,
\fBnone\fR\&.
.sp
If set to
\fBcontrol\-group\fR
all remaining processes in the control group of this service will be terminated on service stop, after the stop command (as configured with
\fIExecStop=\fR) is executed\&. If set to
\fBprocess\fR
only the main process itself is killed\&. If set to
\fBnone\fR
no process is killed\&. In this case only the stop command will be executed on service stop, but no process be killed otherwise\&. Processes remaining alive after stop are left in their control group and the control group continues to exist after stop unless it is empty\&. Defaults to
\fBcontrol\-group\fR\&.
.sp
Processes will first be terminated via SIGTERM (unless the signal to send is changed via
\fIKillSignal=\fR)\&. If then after a delay (configured via the
\fITimeoutSec=\fR
option) processes still remain, the termination request is repeated with the SIGKILL signal (unless this is disabled via the
\fISendSIGKILL=\fR
option)\&. See
\fBkill\fR(2)
for more information\&.
.RE
.PP
\fIKillSignal=\fR
.RS 4
Specifies which signal to use when killing a service\&. Defaults to SIGTERM\&.
.RE
.PP
\fISendSIGKILL=\fR
.RS 4
Specifies whether to send SIGKILL to remaining processes after a timeout, if the normal shutdown procedure left processes of the service around\&. Takes a boolean value\&. Defaults to "yes"\&.
.RE
.PP
\fINonBlocking=\fR
.RS 4
Set O_NONBLOCK flag for all file descriptors passed via socket\-based activation\&. If true, all file descriptors >= 3 (i\&.e\&. all except STDIN/STDOUT/STDERR) will have the O_NONBLOCK flag set and hence are in non\-blocking mode\&. This option is only useful in conjunction with a socket unit, as described in
\fBsystemd.socket\fR(5)\&. Defaults to false\&.
.RE
.PP
\fINotifyAccess=\fR
.RS 4
Controls access to the service status notification socket, as accessible via the
\fBsd_notify\fR(3)
call\&. Takes one of
\fBnone\fR
(the default),
\fBmain\fR
or
\fBall\fR\&. If
\fBnone\fR
no daemon status updates are accepted from the service processes, all status update messages are ignored\&. If
\fBmain\fR
only service updates sent from the main process of the service are accepted\&. If
\fBall\fR
all services updates from all members of the service\*(Aqs control group are accepted\&. This option should be set to open access to the notification socket when using
\fIType=notify\fR
or
\fIWatchdogUsec=\fR
(see above)\&. If those options are used but
\fINotifyAccess=\fR
not configured it will be implicitly set to
\fBmain\fR\&.
.RE
.PP
\fISockets=\fR
.RS 4
Specifies the name of the socket units this service shall inherit the sockets from when the service is started\&. Normally it should not be necessary to use this setting as all sockets whose unit shares the same name as the service (ignoring the different suffix of course) are passed to the spawned process\&.
.sp
Note that the same socket may be passed to multiple processes at the same time\&. Also note that a different service may be activated on incoming traffic than inherits the sockets\&. Or in other words: The
\fIService=\fR
setting of
\&.socket
units doesn\*(Aqt have to match the inverse of the
\fISockets=\fR
setting of the
\&.service
it refers to\&.
.RE
.PP
\fIFsckPassNo=\fR
.RS 4
Set the fsck passno priority to use to order this service in relation to other file system checking services\&. This option is only necessary to fix ordering in relation to fsck jobs automatically created for all
/etc/fstab
entries with a value in the fs_passno column > 0\&. As such it should only be used as option for fsck services\&. Almost always it is a better choice to add explicit ordering directives via
\fIAfter=\fR
or
\fIBefore=\fR, instead\&. For more details see
\fBsystemd.unit\fR(5)\&. If used, pass an integer value in the same range as
/etc/fstab\*(Aqs fs_passno column\&. See
\fBfstab\fR(5)
for details\&.
.RE
.PP
\fIStartLimitInterval=\fR, \fIStartLimitBurst=\fR
.RS 4
Configure service start rate limiting\&. By default services which are started more often than 5 times within 10s are not permitted to start any more times until the 10s interval ends\&. With these two options this rate limiting may be modified\&. Use
\fIStartLimitInterval=\fR
to configure the checking interval (defaults to 10s, set to 0 to disable any kind of rate limiting)\&. Use
\fIStartLimitBurst=\fR
to configure how many starts per interval are allowed (defaults to 5)\&. These configuration options are particularly useful in conjunction with
\fIRestart=\fR\&.
.RE
.PP
\fIStartLimitAction=\fR
.RS 4
Configure the action to take if the rate limit configured with
\fIStartLimitInterval=\fR
and
\fIStartLimitBurst=\fR
is hit\&. Takes one of
\fBnone\fR,
\fBreboot\fR,
\fBreboot\-force\fR
or
\fBreboot\-immediate\fR\&. If
\fBnone\fR
is set, hitting the rate limit will trigger no action besides that the start will not be permitted\&.
\fBreboot\fR
causes a reboot following the normal shutdown procedure (i\&.e\&. equivalent to
\fBsystemctl reboot\fR),
\fBreboot\-force\fR
causes an forced reboot which will terminate all processes forcibly but should cause no dirty file systems on reboot (i\&.e\&. equivalent to
\fBsystemctl reboot \-f\fR) and
\fBreboot\-immediate\fR
causes immediate execution of the
\fBreboot\fR(2)
system call, which might result in data loss\&. Defaults to
\fBnone\fR\&.
.RE
.SH "SEE ALSO"
.PP

\fBsystemd\fR(1),
\fBsystemctl\fR(8),
\fBsystemd.unit\fR(5),
\fBsystemd.exec\fR(5)
.SH "AUTHOR"
.PP
\fBLennart Poettering\fR <\&lennart@poettering\&.net\&>
.RS 4
Developer
.RE
